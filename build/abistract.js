// Generated by CoffeeScript 1.8.0

/*! Abistract 0.0.1 //// MIT licence //// github.com/abisharp //// */

(function() {
  var Abistract, I, Line, VERSION, env, log, toType;

  I = 'Abistract';

  VERSION = '0.0.1';

  env = {
    has: {}
  };

  env.has.global = 'object' === typeof global;

  env.has.window = !('object' !== typeof window || (env.has.global && global.window));

  env.global = env.has.global && !env.has.window ? global : this;

  log = console.log.bind(console);

  toType = function(x) {
    return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
  };

  Abistract = (function() {
    Abistract.prototype.I = 'Abistract';

    Abistract.prototype.toString = function(renderer) {
      if (renderer) {
        return renderer.call(this);
      } else {
        return "[object " + this.I + "]";
      }
    };

    function Abistract(opt) {
      if (opt == null) {
        opt = {};
      }
      opt.canvas.style.backgroundColor = opt.bgcolor;
      this.ctx = opt.canvas.getContext('2d');
      this.ctx.lineWidth = 5;
      this.shapes = [];
    }

    Abistract.prototype.addLine = function(startX, startY, endX, endY, color) {
      return this.shapes.push(new Line({
        ctx: this.ctx,
        startX: startX,
        startY: startY,
        endX: endX,
        endY: endY,
        color: color
      }));
    };

    Abistract.prototype.renderAll = function() {
      var shape, _i, _len, _ref, _results;
      _ref = this.shapes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        shape = _ref[_i];
        _results.push(shape.render());
      }
      return _results;
    };

    return Abistract;

  })();

  Line = (function() {
    Line.prototype.I = 'Line';

    Line.prototype.toString = function(renderer) {
      if (renderer) {
        return renderer.call(this);
      } else {
        return "[object " + this.I + "]";
      }
    };

    function Line(opt) {
      if (opt == null) {
        opt = {};
      }
      this.ctx = opt.ctx;
      this.startX = opt.startX;
      this.startY = opt.startY;
      this.endX = opt.endX;
      this.endY = opt.endY;
      this.color = opt.color;
    }

    Line.prototype.render = function() {
      this.ctx.beginPath();
      this.ctx.strokeStyle = this.color;
      this.ctx.moveTo(this.startX, this.startY);
      this.ctx.lineTo(this.endX, this.endY);
      return this.ctx.stroke();
    };

    return Line;

  })();

  if ('function' === typeof define && define.amd) {
    define(function() {
      return Abistract;
    });
  } else if ('object' === typeof module && module && module.exports) {
    module.exports = Abistract;
  } else {
    env.global.Abistract = Abistract;
  }

}).call(this);
